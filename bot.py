import logging
import requests
import os
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
HF_API_KEY = os.getenv("HF_API_KEY")
MODEL_NAME = "gpt2"  # –ë—ã—Å—Ç—Ä–∞—è –∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞—è –º–æ–¥–µ–ª—å
API_URL = f"https://api-inference.huggingface.co/models/{MODEL_NAME}"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
headers = {"Authorization": f"Bearer {HF_API_KEY}"}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
async def get_hf_response(prompt: str) -> str:
    try:
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_new_tokens": 256,
                "temperature": 0.7,
                "top_p": 0.9,
                "do_sample": True
            }
        }
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)

        logger.info(f"HF Status: {response.status_code}, Response: {response.text[:200]}...")

        if response.status_code == 200:
            try:
                output = response.json()
                if isinstance(output, list):
                    return output[0]['generated_text'].strip()
                elif isinstance(output, dict):
                    if 'generated_text' in output:
                        return output['generated_text'].strip()
                    elif 'error' in output:
                        return f"‚ùå {output['error']}"
                    else:
                        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
                else:
                    return "–û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö."
            except Exception:
                return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç."
        elif response.status_code == 503:
            return "‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        elif response.status_code == 429:
            return "üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        elif response.status_code == 401:
            return "üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ HF_API_KEY."
        else:
            return f"‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text}"
    except Exception as e:
        return f"üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = update.message.chat_id
    username = update.message.from_user.username or update.message.from_user.first_name
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} ({chat_id}): {user_message}")

    await context.bot.send_chat_action(chat_id=chat_id, action='typing')

    # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
    full_prompt = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–¢—ã:"
    )
    response = await get_hf_response(full_prompt)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
    if response.startswith(full_prompt):
        response = response[len(full_prompt):].strip()

    await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
        return
    if not HF_API_KEY:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω HF_API_KEY")
        return

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è Fly.io
    app.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
