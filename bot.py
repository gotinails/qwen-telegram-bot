import logging
import requests
import os
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
HF_API_KEY = os.getenv("HF_API_KEY")
MODEL_NAME = "Qwen/Qwen2.5-1.5B"  # –õ—ë–≥–∫–∞—è, –Ω–æ —É–º–Ω–∞—è –º–æ–¥–µ–ª—å
API_URL = f"https://api-inference.huggingface.co/models/{MODEL_NAME}"

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
headers = {"Authorization": f"Bearer {HF_API_KEY}"}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏
async def get_hf_response(prompt: str) -> str:
    try:
        payload = {
            "inputs": prompt,
            "parameters": {
                "max_new_tokens": 512,
                "temperature": 0.7,
                "top_p": 0.9,
                "do_sample": True
            }
        }
        response = requests.post(API_URL, headers=headers, json=payload)

        if response.status_code == 200:
            return response.json()[0]['generated_text'].strip()
        else:
            error = response.json()
            return f"–û—à–∏–±–∫–∞: {response.status_code} ‚Äî {error.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = update.message.chat_id
    username = update.message.from_user.username or update.message.from_user.first_name
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{username} ({chat_id}): {user_message}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=chat_id, action='typing')

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
    full_prompt = f"–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}\n–¢—ã:"
    response = await get_hf_response(full_prompt)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –º–æ–¥–µ–ª—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–∏–ª–∞)
    if response.startswith(full_prompt):
        response = response[len(full_prompt):].strip()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(response)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not HF_API_KEY:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω HF_API_KEY")
        return
    if not os.getenv("TELEGRAM_BOT_TOKEN"):
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_BOT_TOKEN")
        return

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    app = Application.builder().token(os.getenv("TELEGRAM_BOT_TOKEN")).build()

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_error_handler(error_handler)

    # === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ ===
    port = int(os.getenv("PORT", 8000))
    webhook_url = f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}.onrender.com/webhook"

    app.run_webhook(
        listen="0.0.0.0",
        port=port,
        webhook_url=webhook_url,
        secret_token="my-super-secret-token-12345"
    )
